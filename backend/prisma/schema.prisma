generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        BigInt                 @id @default(autoincrement())
  email                     String?                @unique
  password_hash             String?
  user_type                 UserType
  name                      String
  first_name                String?
  last_name                 String?
  profile_image_url         String?
  phone                     String?                @unique
  timezone                  String?
  language                  String?                @default("en")
  email_verified            Boolean                @default(false)
  status                    UserStatus             @default(pending)
  created_at                DateTime               @default(now())
  updated_at                DateTime               @updatedAt
  last_login_at             DateTime?
  auth_provider             String?                @default("email")
  phone_verified            Boolean                @default(false)
  onboarding_completed      Boolean                @default(false)
  onboarding_step           Int?                   @default(0)
  age                       Int?
  cover_image_url           String?
  agent_status              AgentStatus            @default(available)
  is_online                 Boolean                @default(true)
  last_online_at            DateTime?
  brand_profiles            BrandProfile[]
  cart_items                CartItem[]             @relation("UserCart")
  admin_channels            CollaborationChannel[] @relation("AdminChannels")
  content_reviews           ContentReview[]        @relation("ContentReviewers")
  admin_content_submissions ContentSubmission[]    @relation("AdminContentSubmissions")
  creator_profiles          CreatorProfile?
  kyc_verifications         KYC[]                  @relation("KYCVerifier")
  sent_messages             Message[]              @relation("MessageSender")
  notifications             Notification[]
  admin_payments            Payment[]              @relation("AdminPayments")
  payments_payee            Payment[]              @relation("PaymentPayee")
  payments_payer            Payment[]              @relation("PaymentPayer")
  phone_verifications       PhoneVerification[]
  reviews_reviewed          Review[]               @relation("ReviewReviewed")
  reviews_reviewer          Review[]               @relation("ReviewReviewer")
  assigned_tickets          Ticket[]               @relation("TicketAgent")
}

model BrandProfile {
  id                   BigInt          @id @default(autoincrement())
  user_id              BigInt
  company_name         String
  industry             String?
  industries           Json?
  role_in_organization String?
  business_type        String?
  website_url          String?
  description          String?
  logo_url             String?
  location_country     String?
  location_state       String?
  location_city        String?
  location_pincode     String?
  languages            Json?
  date_of_birth        DateTime?
  gender               String?
  verified             Boolean         @default(false)
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt
  user                 User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  campaigns            Campaign[]
  collaborations       Collaboration[]
  invoices             Invoice[]
  orders_placed        Order[]
  portfolio_items      PortfolioItem[]
}

model CreatorProfile {
  id                    BigInt                @id @default(autoincrement())
  user_id               BigInt                @unique
  bio                   String?
  location_city         String?
  location_state        String?
  location_pincode      String?
  content_categories    Json?
  min_rate              Decimal?
  max_rate              Decimal?
  rate_currency         String?               @default("USD")
  availability_status   AvailabilityStatus?   @default(available)
  verified              Boolean               @default(false)
  featured              Boolean               @default(false)
  rating                Decimal?              @default(0.00)
  total_collaborations  Int                   @default(0)
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  date_of_birth         DateTime?
  gender                String?
  platform              Json?
  languages             Json?
  packages              Json?
  campaign_applications CampaignApplication[]
  collaborations        Collaboration[]
  user                  User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  invoices              Invoice[]
  kyc                   KYC?
  orders_received       Order[]
  packages_created      Package[]
  portfolio_items       PortfolioItem[]
  social_media_accounts SocialMediaAccount[]
}

model SocialMediaAccount {
  id              BigInt         @id @default(autoincrement())
  creator_id      BigInt
  platform        SocialPlatform
  username        String
  url             String?
  follower_count  BigInt         @default(0)
  engagement_rate Decimal        @default(0.00)
  avg_views       BigInt         @default(0)
  verified        Boolean        @default(false)
  last_updated    DateTime       @default(now())
  created_at      DateTime       @default(now())
  creator         CreatorProfile @relation(fields: [creator_id], references: [id], onDelete: Cascade)

  @@unique([creator_id, platform])
}

model Campaign {
  id                          BigInt                @id @default(autoincrement())
  brand_id                    BigInt
  title                       String
  description                 String?
  campaign_type               CampaignType
  target_platforms            Json?
  budget_min                  Decimal?
  budget_max                  Decimal?
  currency                    String?               @default("USD")
  target_demographics         Json?
  required_follower_count_min BigInt                @default(0)
  required_follower_count_max BigInt?
  content_guidelines          String?
  hashtags                    Json?
  mentions                    Json?
  deliverables                Json?
  deadline                    DateTime?
  status                      CampaignStatus        @default(draft)
  applications_count          Int                   @default(0)
  max_collaborators           Int                   @default(1)
  created_at                  DateTime              @default(now())
  updated_at                  DateTime              @updatedAt
  brand                       BrandProfile          @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  campaign_analytics          CampaignAnalytics[]
  campaign_applications       CampaignApplication[]
  collaborations              Collaboration[]
}

model CampaignApplication {
  id                      BigInt            @id @default(autoincrement())
  campaign_id             BigInt
  creator_id              BigInt
  proposed_rate           Decimal
  currency                String            @default("USD")
  pitch_message           String?
  portfolio_links         Json?
  estimated_delivery_date DateTime?
  status                  ApplicationStatus @default(pending)
  applied_at              DateTime          @default(now())
  responded_at            DateTime?
  campaign                Campaign          @relation(fields: [campaign_id], references: [id])
  creator                 CreatorProfile    @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  collaboration           Collaboration?

  @@unique([campaign_id, creator_id])
}

model Collaboration {
  id                  BigInt                @id @default(autoincrement())
  campaign_id         BigInt
  brand_id            BigInt
  creator_id          BigInt
  application_id      BigInt                @unique
  agreed_rate         Decimal
  currency            String                @default("USD")
  contract_terms      String?
  deadline            DateTime?
  status              CollaborationStatus   @default(active)
  started_at          DateTime              @default(now())
  completed_at        DateTime?
  application         CampaignApplication   @relation(fields: [application_id], references: [id])
  brand               BrandProfile          @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  campaign            Campaign              @relation(fields: [campaign_id], references: [id])
  creator             CreatorProfile        @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  channels            CollaborationChannel?
  content_submissions ContentSubmission[]
  invoices            Invoice[]
  payments            Payment[]
  reviews             Review[]
}

model ContentSubmission {
  id                  BigInt               @id @default(autoincrement())
  collaboration_id    BigInt
  admin_id            BigInt
  content_type        ContentType
  content_url         String?
  caption             String?
  hashtags            Json?
  mentions            Json?
  platform            SocialPlatform
  submission_notes    String?
  status              ContentStatus        @default(draft)
  submitted_at        DateTime             @default(now())
  reviewed_at         DateTime?
  published_at        DateTime?
  post_url            String?
  content_performance ContentPerformance[]
  content_reviews     ContentReview[]      @relation("ContentReviewers")
  admin               User                 @relation("AdminContentSubmissions", fields: [admin_id], references: [id])
  collaboration       Collaboration        @relation(fields: [collaboration_id], references: [id])
}

model ContentReview {
  id                    BigInt            @id @default(autoincrement())
  content_submission_id BigInt
  reviewer_id           BigInt
  review_type           ReviewType
  feedback              String?
  created_at            DateTime          @default(now())
  content_submission    ContentSubmission @relation("ContentReviewers", fields: [content_submission_id], references: [id])
  reviewer              User              @relation("ContentReviewers", fields: [reviewer_id], references: [id])
}

model Payment {
  id               BigInt         @id @default(autoincrement())
  collaboration_id BigInt?
  payer_id         BigInt
  payee_id         BigInt
  admin_id         BigInt
  amount           Decimal
  currency         String         @default("USD")
  platform_fee     Decimal        @default(0.00)
  net_amount       Decimal
  payment_method   PaymentMethod
  transaction_id   String?
  status           PaymentStatus  @default(pending)
  initiated_at     DateTime       @default(now())
  completed_at     DateTime?
  failure_reason   String?
  order_id         BigInt?
  admin            User           @relation("AdminPayments", fields: [admin_id], references: [id], onDelete: Cascade)
  collaboration    Collaboration? @relation(fields: [collaboration_id], references: [id])
  order            Order?         @relation(fields: [order_id], references: [id])
  payee            User           @relation("PaymentPayee", fields: [payee_id], references: [id], onDelete: Cascade)
  payer            User           @relation("PaymentPayer", fields: [payer_id], references: [id], onDelete: Cascade)
}

model Invoice {
  id               BigInt         @id @default(autoincrement())
  collaboration_id BigInt?
  brand_id         BigInt
  creator_id       BigInt
  invoice_number   String         @unique
  amount           Decimal
  currency         String         @default("USD")
  tax_amount       Decimal        @default(0.00)
  total_amount     Decimal
  due_date         DateTime
  status           InvoiceStatus  @default(draft)
  issued_at        DateTime       @default(now())
  paid_at          DateTime?
  order_id         BigInt?
  brand            BrandProfile   @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  collaboration    Collaboration? @relation(fields: [collaboration_id], references: [id])
  creator          CreatorProfile @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  order            Order?         @relation(fields: [order_id], references: [id])
}

model Message {
  id           BigInt      @id @default(autoincrement())
  sender_id    BigInt
  message_text String
  message_type MessageType @default(text)
  file_url     String?
  file_name    String?
  read_at      DateTime?
  created_at   DateTime    @default(now())
  ticket_id    BigInt
  target_tab   String?
  channel_type String?
  sender_role  String?
  sender       User        @relation("MessageSender", fields: [sender_id], references: [id], onDelete: Cascade)
  ticket       Ticket      @relation(fields: [ticket_id], references: [id])
}

model Review {
  id               BigInt          @id @default(autoincrement())
  collaboration_id BigInt
  reviewer_id      BigInt
  reviewed_id      BigInt
  rating           Int
  review_text      String?
  review_type      ReviewDirection
  is_public        Boolean         @default(true)
  created_at       DateTime        @default(now())
  collaboration    Collaboration   @relation(fields: [collaboration_id], references: [id])
  reviewed         User            @relation("ReviewReviewed", fields: [reviewed_id], references: [id], onDelete: Cascade)
  reviewer         User            @relation("ReviewReviewer", fields: [reviewer_id], references: [id], onDelete: Cascade)

  @@unique([collaboration_id, reviewer_id])
}

model CampaignAnalytics {
  id            BigInt   @id @default(autoincrement())
  campaign_id   BigInt
  metric_name   String
  metric_value  BigInt
  recorded_date DateTime
  created_at    DateTime @default(now())
  campaign      Campaign @relation(fields: [campaign_id], references: [id])

  @@unique([campaign_id, metric_name, recorded_date])
}

model ContentPerformance {
  id                    BigInt            @id @default(autoincrement())
  content_submission_id BigInt
  platform              SocialPlatform
  likes_count           BigInt            @default(0)
  comments_count        BigInt            @default(0)
  shares_count          BigInt            @default(0)
  views_count           BigInt            @default(0)
  reach_count           BigInt            @default(0)
  engagement_rate       Decimal           @default(0.00)
  recorded_at           DateTime          @default(now())
  content_submission    ContentSubmission @relation(fields: [content_submission_id], references: [id])
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  slug        String     @unique
  description String?
  parent_id   Int?
  is_active   Boolean    @default(true)
  sort_order  Int        @default(0)
  created_at  DateTime   @default(now())
  parent      Category?  @relation("CategoryParent", fields: [parent_id], references: [id])
  children    Category[] @relation("CategoryParent")
}

model Notification {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt
  type       String
  title      String
  message    String
  data       Json?
  read_at    DateTime?
  created_at DateTime  @default(now())
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model PlatformSetting {
  id            Int         @id @default(autoincrement())
  setting_key   String      @unique
  setting_value String
  setting_type  SettingType @default(string)
  description   String?
  updated_at    DateTime    @updatedAt
}

model CollaborationChannel {
  id               BigInt        @id @default(autoincrement())
  collaboration_id BigInt        @unique
  admin_id         BigInt
  created_at       DateTime      @default(now())
  admin            User          @relation("AdminChannels", fields: [admin_id], references: [id], onDelete: Cascade)
  collaboration    Collaboration @relation(fields: [collaboration_id], references: [id])
}

model Package {
  id           BigInt         @id @default(autoincrement())
  type         PackageType
  title        String
  description  String?
  price        Decimal
  deliverables Json?
  created_at   DateTime       @default(now())
  creator_id   BigInt
  currency     String         @default("INR")
  is_active    Boolean        @default(true)
  updated_at   DateTime       @updatedAt
  cart_items   CartItem[]     @relation("PackageCart")
  orders       Order[]
  creator      CreatorProfile @relation(fields: [creator_id], references: [id], onDelete: Cascade)
}

model Order {
  id                      BigInt         @id @default(autoincrement())
  package_id              BigInt
  brand_id                BigInt
  creator_id              BigInt
  quantity                Int            @default(1)
  total_amount            Decimal
  currency                String         @default("USD")
  status                  OrderStatus    @default(pending)
  order_date              DateTime       @default(now())
  completed_at            DateTime?
  rejection_message       String?
  additional_instructions String?
  delivery_time           Int?
  references              Json?
  deliverables            Json?
  price_revision_amount   Decimal?
  price_revision_reason   String?
  invoices                Invoice[]
  brand                   BrandProfile   @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  creator                 CreatorProfile @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  package                 Package        @relation(fields: [package_id], references: [id])
  payments                Payment[]
  ticket                  Ticket?

  @@index([package_id, brand_id, creator_id, status, order_date])
}

model PhoneVerification {
  id          BigInt    @id @default(autoincrement())
  user_id     BigInt?
  phone       String
  code        String
  token       String    @unique
  expires_at  DateTime
  verified_at DateTime?
  created_at  DateTime  @default(now())
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([phone, code])
  @@index([token])
}

model KYC {
  id                  BigInt         @id @default(autoincrement())
  creator_id          BigInt         @unique
  document_type       String
  document_number     String
  document_front_url  String?
  document_back_url   String?
  selfie_url          String?
  bank_account_number String?
  bank_ifsc_code      String?
  bank_account_holder String?
  bank_name           String?
  status              KYCStatus      @default(pending)
  submitted_at        DateTime       @default(now())
  verified_at         DateTime?
  rejected_at         DateTime?
  rejection_reason    String?
  verified_by         BigInt?
  creator             CreatorProfile @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  verifier            User?          @relation("KYCVerifier", fields: [verified_by], references: [id], onDelete: Cascade)

  @@index([status])
}

model PortfolioItem {
  id          BigInt             @id @default(autoincrement())
  creator_id  BigInt?
  title       String
  description String?
  media_url   String
  media_type  PortfolioMediaType
  file_size   BigInt?
  mime_type   String?
  platform    SocialPlatform?
  tags        Json?
  is_featured Boolean            @default(false)
  created_at  DateTime           @default(now())
  updated_at  DateTime           @updatedAt
  brand_id    BigInt?
  brand       BrandProfile?      @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  creator     CreatorProfile?    @relation(fields: [creator_id], references: [id], onDelete: Cascade)

  @@index([creator_id])
  @@index([brand_id])
  @@index([media_type])
}

model Ticket {
  id                    BigInt         @id @default(autoincrement())
  order_id              BigInt         @unique
  agent_id              BigInt
  stream_channel_id     String
  status                TicketStatus   @default(open)
  created_at            DateTime       @default(now())
  updated_at            DateTime       @updatedAt
  priority              TicketPriority @default(medium)
  brand_agent_channel   String?
  creator_agent_channel String?
  messages              Message[]
  agent                 User           @relation("TicketAgent", fields: [agent_id], references: [id])
  order                 Order          @relation(fields: [order_id], references: [id])
}

model CartItem {
  id                      BigInt   @id @default(autoincrement())
  user_id                 BigInt
  package_id              BigInt
  quantity                Int      @default(1)
  delivery_time           Int?
  additional_instructions String?
  references              Json?
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
  package                 Package  @relation("PackageCart", fields: [package_id], references: [id], onDelete: Cascade)
  user                    User     @relation("UserCart", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, package_id])
}

enum UserType {
  brand
  creator
  super_admin
  agent
}

enum UserStatus {
  active
  suspended
  pending
}

enum AgentStatus {
  available
  busy
  offline
  away
}

enum AvailabilityStatus {
  available
  busy
  unavailable
}

enum SocialPlatform {
  instagram
  tiktok
  youtube
  twitter
  facebook
}

enum CampaignType {
  sponsored_post
  story
  video
  reel
  review
  giveaway
}

enum CampaignStatus {
  draft
  active
  paused
  completed
  cancelled
}

enum ApplicationStatus {
  pending
  accepted
  rejected
  withdrawn
}

enum CollaborationStatus {
  active
  content_submitted
  revision_requested
  approved
  completed
  cancelled
  disputed
}

enum ContentType {
  image
  video
  story
  reel
  post
}

enum ContentStatus {
  draft
  submitted
  approved
  revision_requested
  rejected
}

enum ReviewType {
  approval
  revision
  rejection
}

enum PaymentStatus {
  pending
  processing
  completed
  failed
  refunded
}

enum PaymentMethod {
  credit_card
  bank_transfer
  paypal
  stripe
}

enum InvoiceStatus {
  draft
  sent
  paid
  overdue
  cancelled
}

enum MessageType {
  text
  file
  system
}

enum ReviewDirection {
  brand_to_creator
  creator_to_brand
}

enum SettingType {
  string
  number
  boolean
  json
}

enum PackageType {
  predefined
  custom
}

enum KYCStatus {
  pending
  verified
  rejected
}

enum PortfolioMediaType {
  image
  video
  text
}

enum OrderStatus {
  pending
  confirmed
  in_progress
  completed
  cancelled
  refunded
  accepted
  rejected
  review
  revision_requested
  price_revision_pending
}

enum TicketStatus {
  open
  in_progress
  resolved
  closed
}

enum TicketPriority {
  low
  medium
  high
  urgent
}
