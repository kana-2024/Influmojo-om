name: Deploy All Applications (Backend → Webapp → Admin)

on:
  push:
    branches:
      - new-feature-branch
  workflow_dispatch:

jobs:
  deploy-backend:
    name: Deploy Backend API
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
          
      - name: Create deployment package
        run: |
          # Create deployment package
          tar -czf deployment.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env*' \
            --exclude='*.log' \
            --exclude='coverage' \
            --exclude='.nyc_output' \
            .
          
      - name: Upload to S3
        run: |
          # Upload deployment package to S3
          aws s3 cp deployment.tar.gz s3://${{ secrets.S3_BUCKET }}/deployments/influmojo-api-$(date +%Y%m%d-%H%M%S).tar.gz
          
      - name: Deploy via CodeDeploy
        run: |
          # Create CodeDeploy deployment
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APPLICATION_NAME }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --s3-location bucket=${{ secrets.S3_BUCKET }},key=deployments/influmojo-api-$(date +%Y%m%d-%H%M%S).tar.gz,bundleType=tgz \
            --query 'deploymentId' \
            --output text)
          
          echo "Backend Deployment ID: $DEPLOYMENT_ID"
          
          # Wait for deployment to complete
          echo "Waiting for backend deployment to complete..."
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
          
          echo "✅ Backend deployment completed successfully!"
          
      - name: Cleanup
        run: |
          rm -f deployment.tar.gz

  deploy-webapp:
    name: Deploy Webapp
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    steps:
      - name: Checkout webapp code
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.WEBAPP_REPOSITORY }}
          path: webapp
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: webapp/package-lock.json
          
      - name: Install dependencies
        working-directory: webapp
        run: npm ci
        
      - name: Create consolidated environment file
        working-directory: webapp
        run: |
          # Create a temporary .env.local with production values
          # This will be replaced by the actual consolidated .env during deployment
          cat > .env.local << EOF
          NEXT_PUBLIC_API_URL=https://api.influmojo.com
          NEXT_PUBLIC_WEBAPP_URL=https://influmojo.com
          NEXT_PUBLIC_STREAMCHAT_API_KEY=m7zjhhjc9bws
          NODE_ENV=production
          EOF
          
      - name: Build webapp
        working-directory: webapp
        run: npm run build
        
      - name: Create deployment package
        working-directory: webapp
        run: |
          # Create deployment package excluding unnecessary files
          tar -czf webapp-deployment.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.next/cache' \
            --exclude='.env*' \
            --exclude='*.log' \
            --exclude='coverage' \
            --exclude='.nyc_output' \
            .next \
            public \
            package.json \
            package-lock.json \
            next.config.js \
            tailwind.config.js \
            postcss.config.js \
            tsconfig.json
            
      - name: Upload to S3
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
          
        run: |
          # Upload deployment package to S3
          aws s3 cp webapp/webapp-deployment.tar.gz s3://${{ secrets.S3_BUCKET }}/deployments/webapp-$(date +%Y%m%d-%H%M%S).tar.gz
          
      - name: Deploy via CodeDeploy
        run: |
          # Create CodeDeploy deployment
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name influmojo-webapp \
            --deployment-group-name influmojo-webapp-prod \
            --s3-location bucket=${{ secrets.S3_BUCKET }},key=deployments/webapp-$(date +%Y%m%d-%H%M%S).tar.gz,bundleType=tgz \
            --query 'deploymentId' \
            --output text)
          
          echo "Webapp Deployment ID: $DEPLOYMENT_ID"
          
          # Wait for deployment to complete
          echo "Waiting for webapp deployment to complete..."
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
          
          echo "✅ Webapp deployment completed successfully!"
          
      - name: Cleanup
        run: |
          rm -f webapp/webapp-deployment.tar.gz

  deploy-admin:
    name: Deploy Admin Dashboard
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-webapp]
    
    steps:
      - name: Checkout admin dashboard code
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.ADMIN_REPOSITORY }}
          path: admin-dashboard
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: admin-dashboard/package-lock.json
          
      - name: Install dependencies
        working-directory: admin-dashboard
        run: npm ci
        
      - name: Create consolidated environment file
        working-directory: admin-dashboard
        run: |
          # Create a temporary .env.local with production values
          # This will be replaced by the actual consolidated .env during deployment
          cat > .env.local << EOF
          NEXT_PUBLIC_ADMIN_API_URL=https://api.influmojo.com
          NEXT_PUBLIC_ADMIN_STREAMCHAT_API_KEY=m7zjhhjc9bws
          NODE_ENV=production
          EOF
          
      - name: Build admin dashboard
        working-directory: admin-dashboard
        run: npm run build
        
      - name: Create deployment package
        working-directory: admin-dashboard
        run: |
          # Create deployment package excluding unnecessary files
          tar -czf admin-deployment.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.next/cache' \
            --exclude='.env*' \
            --exclude='*.log' \
            --exclude='coverage' \
            --exclude='.nyc_output' \
            .next \
            public \
            package.json \
            package-lock.json \
            next.config.js \
            tailwind.config.js \
            postcss.config.js \
            tsconfig.json
            
      - name: Upload to S3
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
          
        run: |
          # Upload deployment package to S3
          aws s3 cp admin-dashboard/admin-deployment.tar.gz s3://${{ secrets.S3_BUCKET }}/deployments/admin-$(date +%Y%m%d-%H%M%S).tar.gz
          
      - name: Deploy via CodeDeploy
        run: |
          # Create CodeDeploy deployment
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name influmojo-admin \
            --deployment-group-name influmojo-admin-prod \
            --s3-location bucket=${{ secrets.S3_BUCKET }},key=deployments/admin-$(date +%Y%m%d-%H%M%S).tar.gz,bundleType=tgz \
            --query 'deploymentId' \
            --output text)
          
          echo "Admin Dashboard Deployment ID: $DEPLOYMENT_ID"
          
          # Wait for deployment to complete
          echo "Waiting for admin dashboard deployment to complete..."
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
          
          echo "✅ Admin dashboard deployment completed successfully!"
          
      - name: Cleanup
        run: |
          rm -f admin-dashboard/admin-deployment.tar.gz

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-webapp, deploy-admin]
    
    steps:
      - name: Deployment Complete
        run: |
          echo "🎉 All applications deployed successfully!"
          echo ""
          echo "📋 Deployment Summary:"
          echo "✅ Backend API (port 3002)"
          echo "✅ Webapp (Next.js)"
          echo "✅ Admin Dashboard (Next.js)"
          echo ""
          echo "🌐 Applications should be accessible at:"
          echo "   - API: https://api.influmojo.com"
          echo "   - Webapp: https://influmojo.com"
          echo "   - Admin: https://admin.influmojo.com (if configured)"
          echo ""
          echo "🔐 All applications are using the consolidated environment"
          echo "   from AWS Parameter Store for secure configuration."
