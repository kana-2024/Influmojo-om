name: Deploy Webapp

on:
  push:
    branches: [ new-feature-branch ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: webapp/package-lock.json

      - name: Install dependencies
        working-directory: webapp
        run: npm ci --no-audit --no-fund

      - name: Build (Next.js standalone)
        working-directory: webapp
        env:
          NEXT_PUBLIC_API_URL: /api
          NODE_OPTIONS: --max_old_space_size=1024
        run: |
          echo "🔨 Building webapp..."
          node -v && npm -v
          npm run build

          echo "📦 Packaging..."
          rm -rf package
          mkdir -p package

          # 1) Flatten the standalone server + node_modules to package/
          cp -R .next/standalone/* package/

          # 2) Copy the rest of .next that runtime needs (server, BUILD_ID, static, etc.)
          rsync -a --exclude "cache" --exclude "standalone" .next/ package/.next/

          # 3) Add public assets if present
          if [ -d "public" ]; then
            cp -R public package/public
          fi

          # 4) Tiny start wrapper to avoid quoting/ENV/cwd issues
          cat > package/start.sh <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          cd "$(dirname "$0")"

          ENTRY=server.js
          [ -f ".next/standalone/server.js" ] && ENTRY=".next/standalone/server.js"

          export NODE_ENV=production
          export PORT=3000
          export HOST=0.0.0.0

          exec "$(command -v node)" "$ENTRY"
          EOF
          chmod +x package/start.sh

          # 5) Zip it up
          (cd package && zip -qr ../webapp-${{ github.sha }}.zip .)
          ls -lh webapp-${{ github.sha }}.zip

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::424592696132:role/GitHubActionsRole
          aws-region: ap-south-1

      - name: Upload artifact to S3
        run: |
          echo "☁️ Uploading to S3..."
          aws s3 cp webapp/webapp-${{ github.sha }}.zip s3://influmojo-deployments/releases/
          echo "✅ Uploaded: s3://influmojo-deployments/releases/webapp-${{ github.sha }}.zip"

      - name: Deploy to EC2 via SSM
        run: |
          echo "🚀 Deploying to EC2..."
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids i-0b338206ea637e1b4 \
            --comment "Deploy webapp $GITHUB_SHA" \
            --parameters 'commands=[
              "set -euo pipefail",
              "REL=\"$GITHUB_SHA\"",
              "ZIP=\"/tmp/webapp-$GITHUB_SHA.zip\"",
              "echo Downloading package...",
              "aws s3 cp s3://influmojo-deployments/releases/webapp-$GITHUB_SHA.zip $ZIP",
              "sudo mkdir -p /opt/influmojo/releases/$REL /opt/influmojo/current",
              "echo Unzipping...",
              "sudo unzip -qo $ZIP -d /opt/influmojo/releases/$REL",
              "echo Linking current -> $REL",
              "sudo ln -sfn /opt/influmojo/releases/$REL /opt/influmojo/current",

              "echo Starting via PM2...",
              "sudo -iu ssm-user bash -lc \"set -euo pipefail; \
                 cd /opt/influmojo/current; \
                 pm2 delete webapp >/dev/null 2>&1 || true; \
                 pm2 start ./start.sh --name webapp; \
                 pm2 save; \
                 pm2 describe webapp | egrep 'pm_cwd|pm_exec_path|status' || true; \
                 ss -ltnp | egrep ':3000|:3002' || true; \
                 echo Testing local port...; \
                 ip=\\$(hostname -I | awk '{print \\$1}'); \
                 curl -sS -I http://\\$ip:3000/ || true; \
                 pm2 logs webapp --lines 50 --timestamp --nostream || true\"",

              "rm -f $ZIP",
              "echo ✅ Done"
            ]' \
            --output text

          echo "⏳ Letting the service settle for a few seconds..."
          sleep 15
          echo "✅ Deployment command sent."

      - name: Deployment Summary
        run: |
          echo "🎉 Deployment completed!"
          echo "📦 Package: webapp-${{ github.sha }}.zip"
          echo "🌐 URL: http://influmojo-alb-1717302406.ap-south-1.elb.amazonaws.com/"
          echo "📋 Commit: ${{ github.sha }}"
          echo "🔀 Branch: ${{ github.ref_name }}"
