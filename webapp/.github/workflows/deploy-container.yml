name: Build & Deploy Container

on:
  push:
    branches: [ new-feature-branch ]
  workflow_dispatch:

concurrency:
  group: webapp-deploy
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: ap-south-1
      ECR_URI: 424592696132.dkr.ecr.ap-south-1.amazonaws.com/influmojo-webapp
      IMAGE_TAG: ${{ github.sha }}
      # optional: silence Next telemetry during build
      NEXT_TELEMETRY_DISABLED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::424592696132:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build with cache and push to ECR
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./webapp
          file: ./webapp/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.ECR_URI }}:${{ env.IMAGE_TAG }}
          build-args: |
            NEXT_TELEMETRY_DISABLED=${{ env.NEXT_TELEMETRY_DISABLED }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export image URI
        run: echo "IMAGE_URI=${ECR_URI}:${IMAGE_TAG}" >> $GITHUB_ENV

      # Only roll ECS if the cluster/service already exist (so pushes work even before ECS is set up)
      - name: Conditionally update ECS service
        shell: bash
        run: |
          set -euo pipefail
          if aws ecs describe-services --cluster webapp-cluster \
               --services webapp-svc \
               --query 'services[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
            echo "ECS service found. Forcing new deployment…"
            aws ecs update-service \
              --cluster webapp-cluster \
              --service webapp-svc \
              --force-new-deployment \
              --region "$AWS_REGION" >/dev/null
            echo "Waiting for the service to become stable…"
            aws ecs wait services-stable \
              --cluster webapp-cluster \
              --services webapp-svc
            echo "ECS deployment complete."
          else
            echo "ECS service not found (webapp-cluster/webapp-svc). Skipping update."
          fi
