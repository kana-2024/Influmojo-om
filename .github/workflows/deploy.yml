name: Deploy Webapp (EC2)

on:
  push:
    branches: [ new-feature-branch ]
    paths:
      - 'webapp/**'
      - '.github/workflows/deploy-webapp.yml'
  workflow_dispatch:

concurrency:
  group: deploy-webapp-ec2
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: ap-south-1
      S3_BUCKET: influmojo-deployments
      INSTANCE_ID: i-0b338206ea637e1b4
      APP_ROOT: /opt/influmojo
      PORT: 3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: webapp/package-lock.json

      - name: Install dependencies
        working-directory: webapp
        run: npm ci --no-audit --no-fund

      - name: Build (Next.js standalone)
        working-directory: webapp
        env:
          NEXT_PUBLIC_API_URL: /api
          NODE_OPTIONS: --max_old_space_size=1024
        run: |
          echo "üî® Building webapp..."
          node -v && npm -v
          npm run build

          echo "üì¶ Packaging standalone output (flattened)‚Ä¶"
          rm -rf package && mkdir -p package/.next/static
          # Copy the standalone bundle to package/ -> puts server.js at package/server.js
          cp -R .next/standalone/* package/
          # Copy runtime assets and BUILD_ID (required!)
          cp -R .next/static/* package/.next/static/
          cp .next/BUILD_ID package/.next/BUILD_ID
          # Optional: public assets
          if [ -d "public" ]; then cp -R public package/public; fi

          echo "üóúÔ∏è Creating ZIP‚Ä¶"
          (cd package && zip -qr ../webapp-${GITHUB_SHA}.zip .)
          ls -lh webapp-${GITHUB_SHA}.zip

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::424592696132:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload artifact to S3
        working-directory: webapp
        run: |
          echo "‚òÅÔ∏è Uploading to s3://${S3_BUCKET}/releases/"
          aws s3 cp webapp-${GITHUB_SHA}.zip s3://${S3_BUCKET}/releases/
          echo "‚úÖ s3://${S3_BUCKET}/releases/webapp-${GITHUB_SHA}.zip"

      - name: Deploy to EC2 via SSM
        run: |
          echo "üöÄ Deploying to EC2..."
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "${INSTANCE_ID}" \
            --comment "Deploy webapp ${GITHUB_SHA}" \
            --parameters '{
              "commands": [
                "set -euo pipefail",
                "REL=\"'${GITHUB_SHA}'\"",
                "ZIP=\"/tmp/webapp-'${GITHUB_SHA}'.zip\"",
                "echo \">>> downloading package\"",
                "aws s3 cp s3://'${S3_BUCKET}'/releases/webapp-'${GITHUB_SHA}'.zip ${ZIP}",
                "echo \">>> preparing release dir\"",
                "sudo mkdir -p '${APP_ROOT}'/releases/${REL} '${APP_ROOT}'/current",
                "echo \">>> unzipping\"",
                "sudo unzip -qo ${ZIP} -d '${APP_ROOT}'/releases/${REL}",

                "echo \">>> sanity checks\"",
                "test -f '${APP_ROOT}'/releases/${REL}/server.js || { echo \"server.js missing in release\"; ls -la '${APP_ROOT}'/releases/${REL}; exit 1; }",
                "test -f '${APP_ROOT}'/releases/${REL}/.next/BUILD_ID || { echo \".next/BUILD_ID missing\"; ls -la '${APP_ROOT}'/releases/${REL}/.next || true; exit 1; }",

                "echo \">>> linking current -> ${REL}\"",
                "sudo ln -sfn '${APP_ROOT}'/releases/${REL} '${APP_ROOT}'/current",

                "echo \">>> starting with pm2\"",
                "sudo -iu ssm-user bash -lc 'set -euo pipefail; \
                  APP=\"'${APP_ROOT}'/current\"; cd \"$APP\"; \
                  pm2 delete webapp >/dev/null 2>&1 || true; \
                  ENTRY=server.js; [ -f .next/standalone/server.js ] && ENTRY=.next/standalone/server.js; \
                  echo \"ENTRY=$ENTRY  CWD=$(pwd)\"; \
                  NODE_ENV=production PORT='${PORT}' HOST=0.0.0.0 pm2 start \"$(which node)\" --name webapp --cwd \"$APP\" -- \"$ENTRY\"; \
                  pm2 save; \
                  pm2 describe webapp | egrep \"pm_exec_path|pm_cwd|status\" || true; \
                  ss -ltnp | egrep \":'${PORT}'|:3002\" || true; \
                  curl -sS -I http://127.0.0.1:'${PORT}'/ || true; \
                  pm2 logs webapp --lines 50 --timestamp --nostream || true' ",

                "rm -f ${ZIP}",
                "echo '‚úÖ done'"
              ]
            }' \
            --output text

      - name: Deployment Summary
        run: |
          echo "üéâ Deployment completed for commit ${GITHUB_SHA}"
          echo "üåê Check via ALB: http://influmojo-alb-1717302406.ap-south-1.elb.amazonaws.com/"
